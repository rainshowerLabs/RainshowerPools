const hre = require("hardhat");

const testToken = {
  tokenName: "Ether",
  symbol: "ETH",
  decimals: 1000000000,
};
//const factoryAddress = "0x2279B7A0a67DB372996a5FaB50D91eAA73d2eBe6";

// change this depending on the network
// Linea:
// WETH: 0x666E4018aD77127E3273bA391C60a60AD7244451
// USDC: 0x5345ed0c3D495077A47Bb06b9E61983C4949cC1D
// pool: 0x431c131cE00F9804887A5c3174E7ca3520C442ED
// fee: 0.5%

// gorli
// WETH: 0x666E4018aD77127E3273bA391C60a60AD7244451
// USDC: 0x617c42dB45b8D1F2cE4Ec29156de8BBbb5e41F6b
// pool: 0xc260a0bb4040f82a28915859b3fc43a2e860e0bf
// fee: 0.5%

const fWETH = "0x666E4018aD77127E3273bA391C60a60AD7244451";
const fUSDC = "0x5345ed0c3D495077A47Bb06b9E61983C4949cC1D";

const factoryBytecode =
  "0x608060405234801561001057600080fd5b50610892806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632adc46c6146100515780635d80940614610081578063718f1ed714610094578063b0c31b07146100b7575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61006461008f366004610203565b6100da565b6100a76100a23660046102de565b61018e565b6040519015158152602001610078565b6100a76100c53660046102de565b60016020526000908152604090205460ff1681565b6000808484846040516100ec906101c9565b6100f893929190610300565b604051809103906000f080158015610114573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b038316908117825580825260016020818152604093849020805460ff1916909217909155825191825233908201529192507f023a88dd659f88446be99ae177ead7ffce8d8bf6831422b67aeb2cfabd039e22910160405180910390a1949350505050565b6001600160a01b038116600090815260016020819052604082205460ff16151590036101bc57506001919050565b506000919050565b919050565b6104ed8061037083390190565b80356001600160a01b03811681146101c457600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561021857600080fd5b610221846101d6565b9250602084013567ffffffffffffffff808216821461023f57600080fd5b9092506040850135908082111561025557600080fd5b818601915086601f83011261026957600080fd5b81358181111561027b5761027b6101ed565b604051601f8201601f19908116603f011681019083821181831017156102a3576102a36101ed565b816040528281528960208487010111156102bc57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000602082840312156102f057600080fd5b6102f9826101d6565b9392505050565b60018060a01b03841681526000602067ffffffffffffffff85168184015260606040840152835180606085015260005b8181101561034c57858101830151858201608001528201610330565b506000608082860101526080601f19601f8301168501019250505094935050505056fe60806040526040516104ed3803806104ed8339810160408190526100229161009f565b600380546001600160a01b0319166001600160a01b03851617905560046100498282610229565b5050600280546001600160401b0390921661010002610100600160481b031990921691909117905550600080546001600160a01b031916331790556102e8565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156100b457600080fd5b83516001600160a01b03811681146100cb57600080fd5b602085810151919450906001600160401b0380821682146100eb57600080fd5b60408701519194508082111561010057600080fd5b818701915087601f83011261011457600080fd5b81518181111561012657610126610089565b604051601f8201601f19908116603f0116810190838211818310171561014e5761014e610089565b816040528281528a8684870101111561016657600080fd5b600093505b82841015610188578484018601518185018701529285019261016b565b60008684830101528096505050505050509250925092565b600181811c908216806101b457607f821691505b6020821081036101d457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561022457600081815260208120601f850160051c810160208610156102015750805b601f850160051c820191505b818110156102205782815560010161020d565b5050505b505050565b81516001600160401b0381111561024257610242610089565b6102568161025084546101a0565b846101da565b602080601f83116001811461028b57600084156102735750858301515b600019600386901b1c1916600185901b178555610220565b600085815260208120601f198616915b828110156102ba5788860151825594840194600190910190840161029b565b50858210156102d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6101f6806102f76000396000f3fe6080604052600436106100345760003560e01c80631ce7dafb1461003957806343d726d61461004e5780639b5b445e14610056575b600080fd5b61004c610047366004610178565b61005e565b005b61004c6100a6565b61004c6100da565b6100a38160405160240161007491815260200190565b60408051601f198184030181529190526020810180516001600160e01b0316631ed48a5f60e21b179052610108565b50565b6040805160048152602481019091526020810180516001600160e01b0316632b06b75160e01b1790526100d890610108565b565b6040805160048152602481019091526020810180516001600160e01b0316630fdfb93360e31b1790526100d8905b6003546040516000916001600160a01b031690610126908490610191565b600060405180830381855af49150503d8060008114610161576040519150601f19603f3d011682016040523d82523d6000602084013e610166565b606091505b505090508061017457600080fd5b5050565b60006020828403121561018a57600080fd5b5035919050565b6000825160005b818110156101b25760208186018101518583015201610198565b50600092019182525091905056fea26469706673582212208bddfb6d21d2175f45b98ee42ea7add13192c31051d7bea0b559573707fa3de564736f6c63430008100033a2646970667358221220673f0114826d39005f86996f7c0a691aee222e5aeeed497d8e1730b507de7a5a64736f6c63430008100033";
const factoryABI = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "borrow",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "createdBorrow",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_moduleAddress",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "_expiry",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "createBorrow",
    outputs: [
      {
        internalType: "address",
        name: "_borrowAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isBorrow",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isValidBorrow",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestBorrow",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const UniModuleBytecode =
  "0x608060405234801561001057600080fd5b506112fe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632b06b751146100465780637b52297c146100505780637efdc99814610063575b600080fd5b61004e61006b565b005b61004e61005e366004610f65565b61064f565b61004e610944565b6002805460ff16146100985760405162461bcd60e51b815260040161008f90610f7e565b60405180910390fd5b6100a0610f19565b600480546100ad90610f9e565b80601f01602080910402602001604051908101604052809291908181526020018280546100d990610f9e565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b505050505080602001905181019061013e9190611084565b6001549091506000906001600160a01b031633146102b25760408083015190516370a0823160e01b8152306004820152600091600a9161025f916001600160a01b0316906370a0823190602401602060405180830381865afa1580156101a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cc919061113a565b85606001516001600160a01b0316639874a99c8761010001518860a0015189602001518a600001518b604001516040518663ffffffff1660e01b8152600401610219959493929190611153565b602060405180830381865afa158015610236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025a919061113a565b610aec565b61026991906111aa565b9050808360c0015169ffffffffffffffffffff16111561028857600191505b811580156102a65750600254610100900467ffffffffffffffff1642105b156102b057600080fd5b505b6002805460ff191660031790556040828101518351602085015192516370a0823160e01b8152306004820152610350936001600160801b0316906001600160a01b038416906370a0823190602401602060405180830381865afa15801561031d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610341919061113a565b86608001518760e00151610b0a565b5081516000546040516370a0823160e01b81523060048201526001600160a01b039283169263a9059cbb92169083906370a0823190602401602060405180830381865afa1580156103a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c9919061113a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043891906111cc565b50801561052c5760408281015190516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90339083906370a0823190602401602060405180830381865afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b7919061113a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610502573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052691906111cc565b50610618565b60408281015160015491516370a0823160e01b81523060048201526001600160a01b039182169263a9059cbb92169083906370a0823190602401602060405180830381865afa158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a7919061113a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061691906111cc565b505b6040513081527f8b9af28cc3b96591597a5eae32ffeae6126a74169070e84fb09c99992d7340b09060200160405180910390a15050565b60025460ff166001146106745760405162461bcd60e51b815260040161008f90610f7e565b6002805460ff191681179055600180546001600160a01b0319163317905561069a610f19565b600480546106a790610f9e565b80601f01602080910402602001604051908101604052809291908181526020018280546106d390610f9e565b80156107205780601f106106f557610100808354040283529160200191610720565b820191906000526020600020905b81548152906001019060200180831161070357829003601f168201915b50505050508060200190518101906107389190611084565b905067016a6075a716ffff8160c0015169ffffffffffffffffffff16116107875760405162461bcd60e51b815260206004820152600360248201526213535360ea1b604482015260640161008f565b600081606001516001600160a01b0316639874a99c8361010001518460a001518560200151866000015187604001516040518663ffffffff1660e01b81526004016107d6959493929190611153565b602060405180830381865afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610817919061113a565b905081604001516001600160a01b03166323b872dd333084610849868860c0015169ffffffffffffffffffff16610bf8565b61085490600a6111f5565b61085e9190611214565b6108689088611227565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e091906111cc565b5061090b8260000151836040015184602001516001600160801b031685608001518660e00151610c0d565b506040513081527f2c04475e6c00205263948e86a63403c41ee05c79a4cfad1b3ad528655473b7389060200160405180910390a1505050565b60025460ff16156109675760405162461bcd60e51b815260040161008f90610f7e565b6002805460ff19166001179055600080546001600160a01b0319163317905561098e610f19565b6004805461099b90610f9e565b80601f01602080910402602001604051908101604052809291908181526020018280546109c790610f9e565b8015610a145780601f106109e957610100808354040283529160200191610a14565b820191906000526020600020905b8154815290600101906020018083116109f757829003601f168201915b5050505050806020019051810190610a2c9190611084565b805160208201516040516323b872dd60e01b81523360048201523060248201526001600160801b0390911660448201529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab591906111cc565b506040513081527feb05f1f2ed517218b630f5f6c1a7c039f730003d7f64b9621477ec8597846f8d9060200160405180910390a150565b6000610b0183670de0b6b3a764000084610cd3565b90505b92915050565b6000610b17878386610cf2565b6040805160e0810182526001600160a01b03808a168252888116602083015262ffffff8616828401523060608301526080820188905260a08201879052600060c08301529151635023b4df60e01b81529091841690635023b4df90610b8090849060040161123a565b6020604051808303816000875af1158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc3919061113a565b915084821015610bed57610bd988846000610cf2565b610bed8833610be88589611214565b610df2565b509695505050505050565b6000610b018383670de0b6b3a7640000610eeb565b6000610c1c8683600019610cf2565b6040805160e0810182526001600160a01b038089168252878116602083015262ffffff86168284015230606083015260808201879052600060a0830181905260c083015291516304e45aaf60e01b815290918416906304e45aaf90610c8590849060040161123a565b6020604051808303816000875af1158015610ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc8919061113a565b979650505050505050565b828202811515841585830485141716610ceb57600080fd5b0492915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691610d4e9190611299565b6000604051808303816000865af19150503d8060008114610d8b576040519150601f19603f3d011682016040523d82523d6000602084013e610d90565b606091505b5091509150818015610dba575080511580610dba575080806020019051810190610dba91906111cc565b610deb5760405162461bcd60e51b8152602060048201526002602482015261534160f01b604482015260640161008f565b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610e4e9190611299565b6000604051808303816000865af19150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150818015610eba575080511580610eba575080806020019051810190610eba91906111cc565b610deb5760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640161008f565b828202811515841585830485141716610f0357600080fd5b6001826001830304018115150290509392505050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b600060208284031215610f7757600080fd5b5035919050565b60208082526006908201526521535441544560d01b604082015260600190565b600181811c90821680610fb257607f821691505b602082108103610fd257634e487b7160e01b600052602260045260246000fd5b50919050565b604051610120810167ffffffffffffffff8111828210171561100a57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b038116811461102757600080fd5b919050565b80516001600160801b038116811461102757600080fd5b805162ffffff8116811461102757600080fd5b805163ffffffff8116811461102757600080fd5b805169ffffffffffffffffffff8116811461102757600080fd5b6000610120828403121561109757600080fd5b61109f610fd8565b6110a883611010565b81526110b66020840161102c565b60208201526110c760408401611010565b60408201526110d860608401611010565b60608201526110e960808401611043565b60808201526110fa60a08401611056565b60a082015261110b60c0840161106a565b60c082015261111c60e08401611010565b60e082015261010061112f818501611010565b908201529392505050565b60006020828403121561114c57600080fd5b5051919050565b6001600160a01b03958616815263ffffffff9490941660208501526001600160801b0392909216604084015283166060830152909116608082015260a00190565b634e487b7160e01b600052601160045260246000fd5b6000826111c757634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156111de57600080fd5b815180151581146111ee57600080fd5b9392505050565b600081600019048311821515161561120f5761120f611194565b500290565b81810381811115610b0457610b04611194565b80820180821115610b0457610b04611194565b60e08101610b04828480516001600160a01b03908116835260208083015182169084015260408083015162ffffff16908401526060808301518216908401526080808301519084015260a0828101519084015260c09182015116910152565b6000825160005b818110156112ba57602081860181015185830152016112a0565b50600092019182525091905056fea264697066735822122084ecd12100d50b5f6f6c6c2bd6297727a725bfe3d57b3f1eeb9637a62500368c64736f6c63430008100033";
const moduleABI = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "borrow",
        type: "address",
      },
    ],
    name: "closeEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "borrow",
        type: "address",
      },
    ],
    name: "fundWithMarginAndOpenEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "borrow",
        type: "address",
      },
    ],
    name: "fundWithTokensEvent",
    type: "event",
  },
  {
    inputs: [],
    name: "onClose",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_extraMargin",
        type: "uint256",
      },
    ],
    name: "onFundWithMarginAndOpen",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "onFundWithTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

async function main() {
  const [signer] = await hre.ethers.getSigners();

  console.log("Deploying contracts with the account:", signer.address);

  // Deploy the factory
  const Factory = new ethers.ContractFactory(
    factoryABI,
    factoryBytecode,
    signer
  );

  const factory = await Factory.deploy();

  console.log("Factory deployed to: ", await factory.address);

  // Deploy UniModule
  const UniModule = new ethers.ContractFactory(
    moduleABI,
    UniModuleBytecode,
    signer
  );
  const uniModule = await UniModule.deploy();

  await uniModule.deployed();

  console.log("UniModule deployed to: ", await uniModule.address);

  // Deploy Risk Controller
  const RiskController = await hre.ethers.getContractFactory("RiskController");
  const riskController = await RiskController.deploy();

  console.log("RiskController deployed to:", riskController.address);

  // Deploy Rainshower Pool
  const RainshowerPool = await hre.ethers.getContractFactory("RainshowerPoool");
  const rainshowerPool = await RainshowerPool.deploy(
    riskController.address,
    factory.address
  );

  console.log("Rainshower Poool deployed to:", rainshowerPool.address);

  // Deploy adapter
  Adapter = await ethers.getContractFactory("UniswapDataAdapter");
  const adapter = await Adapter.deploy(); // Add const keyword
  await adapter.deployed();

  const UniAdapterAddress = await adapter.address;
  console.log("UniAdapter deployed to:", UniAdapterAddress);

  await rainshowerPool.addAdapter(UniAdapterAddress, uniModule.address);

  // Add tokens to poool
  await rainshowerPool.addAsset(fWETH);
  await rainshowerPool.addAsset(fUSDC);
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
