const { expect } = require("chai");
const { ethers } = require("hardhat");

const fWETH = "0x666E4018aD77127E3273bA391C60a60AD7244451";
const fUSDC = "0x617c42dB45b8D1F2cE4Ec29156de8BBbb5e41F6b";
const pool = "0xc260a0bb4040f82a28915859b3fc43a2e860e0bf";
const fee = "300";
const period = "1";
const swapRouterAddress = '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45';

const factoryBytecode =
  "0x608060405234801561001057600080fd5b50610892806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632adc46c6146100515780635d80940614610081578063718f1ed714610094578063b0c31b07146100b7575b600080fd5b600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61006461008f366004610203565b6100da565b6100a76100a23660046102de565b61018e565b6040519015158152602001610078565b6100a76100c53660046102de565b60016020526000908152604090205460ff1681565b6000808484846040516100ec906101c9565b6100f893929190610300565b604051809103906000f080158015610114573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b038316908117825580825260016020818152604093849020805460ff1916909217909155825191825233908201529192507f023a88dd659f88446be99ae177ead7ffce8d8bf6831422b67aeb2cfabd039e22910160405180910390a1949350505050565b6001600160a01b038116600090815260016020819052604082205460ff16151590036101bc57506001919050565b506000919050565b919050565b6104ed8061037083390190565b80356001600160a01b03811681146101c457600080fd5b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561021857600080fd5b610221846101d6565b9250602084013567ffffffffffffffff808216821461023f57600080fd5b9092506040850135908082111561025557600080fd5b818601915086601f83011261026957600080fd5b81358181111561027b5761027b6101ed565b604051601f8201601f19908116603f011681019083821181831017156102a3576102a36101ed565b816040528281528960208487010111156102bc57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000602082840312156102f057600080fd5b6102f9826101d6565b9392505050565b60018060a01b03841681526000602067ffffffffffffffff85168184015260606040840152835180606085015260005b8181101561034c57858101830151858201608001528201610330565b506000608082860101526080601f19601f8301168501019250505094935050505056fe60806040526040516104ed3803806104ed8339810160408190526100229161009f565b600380546001600160a01b0319166001600160a01b03851617905560046100498282610229565b5050600280546001600160401b0390921661010002610100600160481b031990921691909117905550600080546001600160a01b031916331790556102e8565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156100b457600080fd5b83516001600160a01b03811681146100cb57600080fd5b602085810151919450906001600160401b0380821682146100eb57600080fd5b60408701519194508082111561010057600080fd5b818701915087601f83011261011457600080fd5b81518181111561012657610126610089565b604051601f8201601f19908116603f0116810190838211818310171561014e5761014e610089565b816040528281528a8684870101111561016657600080fd5b600093505b82841015610188578484018601518185018701529285019261016b565b60008684830101528096505050505050509250925092565b600181811c908216806101b457607f821691505b6020821081036101d457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561022457600081815260208120601f850160051c810160208610156102015750805b601f850160051c820191505b818110156102205782815560010161020d565b5050505b505050565b81516001600160401b0381111561024257610242610089565b6102568161025084546101a0565b846101da565b602080601f83116001811461028b57600084156102735750858301515b600019600386901b1c1916600185901b178555610220565b600085815260208120601f198616915b828110156102ba5788860151825594840194600190910190840161029b565b50858210156102d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6101f6806102f76000396000f3fe6080604052600436106100345760003560e01c80631ce7dafb1461003957806343d726d61461004e5780639b5b445e14610056575b600080fd5b61004c610047366004610178565b61005e565b005b61004c6100a6565b61004c6100da565b6100a38160405160240161007491815260200190565b60408051601f198184030181529190526020810180516001600160e01b0316631ed48a5f60e21b179052610108565b50565b6040805160048152602481019091526020810180516001600160e01b0316632b06b75160e01b1790526100d890610108565b565b6040805160048152602481019091526020810180516001600160e01b0316630fdfb93360e31b1790526100d8905b6003546040516000916001600160a01b031690610126908490610191565b600060405180830381855af49150503d8060008114610161576040519150601f19603f3d011682016040523d82523d6000602084013e610166565b606091505b505090508061017457600080fd5b5050565b60006020828403121561018a57600080fd5b5035919050565b6000825160005b818110156101b25760208186018101518583015201610198565b50600092019182525091905056fea26469706673582212208bddfb6d21d2175f45b98ee42ea7add13192c31051d7bea0b559573707fa3de564736f6c63430008100033a2646970667358221220673f0114826d39005f86996f7c0a691aee222e5aeeed497d8e1730b507de7a5a64736f6c63430008100033";
const factoryABI = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "borrow",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    name: "createdBorrow",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_moduleAddress",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "_expiry",
        type: "uint64",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "createBorrow",
    outputs: [
      {
        internalType: "address",
        name: "_borrowAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isBorrow",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isValidBorrow",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestBorrow",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const UniModuleBytecode =
  "0x608060405234801561001057600080fd5b506112fe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632b06b751146100465780637b52297c146100505780637efdc99814610063575b600080fd5b61004e61006b565b005b61004e61005e366004610f65565b61064f565b61004e610944565b6002805460ff16146100985760405162461bcd60e51b815260040161008f90610f7e565b60405180910390fd5b6100a0610f19565b600480546100ad90610f9e565b80601f01602080910402602001604051908101604052809291908181526020018280546100d990610f9e565b80156101265780601f106100fb57610100808354040283529160200191610126565b820191906000526020600020905b81548152906001019060200180831161010957829003601f168201915b505050505080602001905181019061013e9190611084565b6001549091506000906001600160a01b031633146102b25760408083015190516370a0823160e01b8152306004820152600091600a9161025f916001600160a01b0316906370a0823190602401602060405180830381865afa1580156101a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cc919061113a565b85606001516001600160a01b0316639874a99c8761010001518860a0015189602001518a600001518b604001516040518663ffffffff1660e01b8152600401610219959493929190611153565b602060405180830381865afa158015610236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025a919061113a565b610aec565b61026991906111aa565b9050808360c0015169ffffffffffffffffffff16111561028857600191505b811580156102a65750600254610100900467ffffffffffffffff1642105b156102b057600080fd5b505b6002805460ff191660031790556040828101518351602085015192516370a0823160e01b8152306004820152610350936001600160801b0316906001600160a01b038416906370a0823190602401602060405180830381865afa15801561031d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610341919061113a565b86608001518760e00151610b0a565b5081516000546040516370a0823160e01b81523060048201526001600160a01b039283169263a9059cbb92169083906370a0823190602401602060405180830381865afa1580156103a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c9919061113a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610414573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043891906111cc565b50801561052c5760408281015190516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90339083906370a0823190602401602060405180830381865afa158015610493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b7919061113a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610502573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052691906111cc565b50610618565b60408281015160015491516370a0823160e01b81523060048201526001600160a01b039182169263a9059cbb92169083906370a0823190602401602060405180830381865afa158015610583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a7919061113a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061691906111cc565b505b6040513081527f8b9af28cc3b96591597a5eae32ffeae6126a74169070e84fb09c99992d7340b09060200160405180910390a15050565b60025460ff166001146106745760405162461bcd60e51b815260040161008f90610f7e565b6002805460ff191681179055600180546001600160a01b0319163317905561069a610f19565b600480546106a790610f9e565b80601f01602080910402602001604051908101604052809291908181526020018280546106d390610f9e565b80156107205780601f106106f557610100808354040283529160200191610720565b820191906000526020600020905b81548152906001019060200180831161070357829003601f168201915b50505050508060200190518101906107389190611084565b905067016a6075a716ffff8160c0015169ffffffffffffffffffff16116107875760405162461bcd60e51b815260206004820152600360248201526213535360ea1b604482015260640161008f565b600081606001516001600160a01b0316639874a99c8361010001518460a001518560200151866000015187604001516040518663ffffffff1660e01b81526004016107d6959493929190611153565b602060405180830381865afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610817919061113a565b905081604001516001600160a01b03166323b872dd333084610849868860c0015169ffffffffffffffffffff16610bf8565b61085490600a6111f5565b61085e9190611214565b6108689088611227565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e091906111cc565b5061090b8260000151836040015184602001516001600160801b031685608001518660e00151610c0d565b506040513081527f2c04475e6c00205263948e86a63403c41ee05c79a4cfad1b3ad528655473b7389060200160405180910390a1505050565b60025460ff16156109675760405162461bcd60e51b815260040161008f90610f7e565b6002805460ff19166001179055600080546001600160a01b0319163317905561098e610f19565b6004805461099b90610f9e565b80601f01602080910402602001604051908101604052809291908181526020018280546109c790610f9e565b8015610a145780601f106109e957610100808354040283529160200191610a14565b820191906000526020600020905b8154815290600101906020018083116109f757829003601f168201915b5050505050806020019051810190610a2c9190611084565b805160208201516040516323b872dd60e01b81523360048201523060248201526001600160801b0390911660448201529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610a91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab591906111cc565b506040513081527feb05f1f2ed517218b630f5f6c1a7c039f730003d7f64b9621477ec8597846f8d9060200160405180910390a150565b6000610b0183670de0b6b3a764000084610cd3565b90505b92915050565b6000610b17878386610cf2565b6040805160e0810182526001600160a01b03808a168252888116602083015262ffffff8616828401523060608301526080820188905260a08201879052600060c08301529151635023b4df60e01b81529091841690635023b4df90610b8090849060040161123a565b6020604051808303816000875af1158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc3919061113a565b915084821015610bed57610bd988846000610cf2565b610bed8833610be88589611214565b610df2565b509695505050505050565b6000610b018383670de0b6b3a7640000610eeb565b6000610c1c8683600019610cf2565b6040805160e0810182526001600160a01b038089168252878116602083015262ffffff86168284015230606083015260808201879052600060a0830181905260c083015291516304e45aaf60e01b815290918416906304e45aaf90610c8590849060040161123a565b6020604051808303816000875af1158015610ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc8919061113a565b979650505050505050565b828202811515841585830485141716610ceb57600080fd5b0492915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691610d4e9190611299565b6000604051808303816000865af19150503d8060008114610d8b576040519150601f19603f3d011682016040523d82523d6000602084013e610d90565b606091505b5091509150818015610dba575080511580610dba575080806020019051810190610dba91906111cc565b610deb5760405162461bcd60e51b8152602060048201526002602482015261534160f01b604482015260640161008f565b5050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610e4e9190611299565b6000604051808303816000865af19150503d8060008114610e8b576040519150601f19603f3d011682016040523d82523d6000602084013e610e90565b606091505b5091509150818015610eba575080511580610eba575080806020019051810190610eba91906111cc565b610deb5760405162461bcd60e51b815260206004820152600260248201526114d560f21b604482015260640161008f565b828202811515841585830485141716610f0357600080fd5b6001826001830304018115150290509392505050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915290565b600060208284031215610f7757600080fd5b5035919050565b60208082526006908201526521535441544560d01b604082015260600190565b600181811c90821680610fb257607f821691505b602082108103610fd257634e487b7160e01b600052602260045260246000fd5b50919050565b604051610120810167ffffffffffffffff8111828210171561100a57634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b038116811461102757600080fd5b919050565b80516001600160801b038116811461102757600080fd5b805162ffffff8116811461102757600080fd5b805163ffffffff8116811461102757600080fd5b805169ffffffffffffffffffff8116811461102757600080fd5b6000610120828403121561109757600080fd5b61109f610fd8565b6110a883611010565b81526110b66020840161102c565b60208201526110c760408401611010565b60408201526110d860608401611010565b60608201526110e960808401611043565b60808201526110fa60a08401611056565b60a082015261110b60c0840161106a565b60c082015261111c60e08401611010565b60e082015261010061112f818501611010565b908201529392505050565b60006020828403121561114c57600080fd5b5051919050565b6001600160a01b03958616815263ffffffff9490941660208501526001600160801b0392909216604084015283166060830152909116608082015260a00190565b634e487b7160e01b600052601160045260246000fd5b6000826111c757634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156111de57600080fd5b815180151581146111ee57600080fd5b9392505050565b600081600019048311821515161561120f5761120f611194565b500290565b81810381811115610b0457610b04611194565b80820180821115610b0457610b04611194565b60e08101610b04828480516001600160a01b03908116835260208083015182169084015260408083015162ffffff16908401526060808301518216908401526080808301519084015260a0828101519084015260c09182015116910152565b6000825160005b818110156112ba57602081860181015185830152016112a0565b50600092019182525091905056fea264697066735822122084ecd12100d50b5f6f6c6c2bd6297727a725bfe3d57b3f1eeb9637a62500368c64736f6c63430008100033";
const TrsModuleBytecode =
  "0x608060405234801561001057600080fd5b50611473806100206000396000f3fe6080604052600436106100345760003560e01c80632b06b751146100395780637b52297c146100435780637efdc99814610056575b600080fd5b61004161005e565b005b610041610051366004610ef2565b6106a9565b610041610713565b6002805460ff161461006f57600080fd5b6002805460ff19166003179055610084610e9e565b6004805461009190610f0b565b80601f01602080910402602001604051908101604052809291908181526020018280546100bd90610f0b565b801561010a5780601f106100df5761010080835404028352916020019161010a565b820191906000526020600020905b8154815290600101906020018083116100ed57829003601f168201915b50505050508060200190518101906101229190611011565b90506000610e108260a0015166ffffffffffffff164261014291906110e8565b61014c91906110fb565b90506000811561015c578161015f565b60015b8360c001516001600160581b0316610177919061111d565b9050600083604001516001600160a01b0316635a0da8fa8560600151866101000151876020015188600001516040518563ffffffff1660e01b81526004016101c2949392919061113c565b602060405180830381865afa1580156101df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102039190611174565b6001549091506001600160a01b031633146102915760008461012001516001600160801b0316831061023757506001610267565b84608001516001600160501b031661025d8661012001516001600160801b0316846108ac565b1015610267575060015b801580156102855750600254610100900467ffffffffffffffff1642105b1561028f57600080fd5b505b8361012001516001600160801b03168211156102b9578361012001516001600160801b031691505b6001600160801b038211156102d3576001600160801b0391505b6101208401516001600160801b03161561038057835160005460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291169063a9059cbb906044016020604051808303816000875af115801561033b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035f919061118d565b5081846101200181815161037391906111b6565b6001600160801b03169052505b60e084015160ff1c15801561045d57600061039f8660e00151846108ac565b90506103b9818761012001516001600160801b03166108ca565b602087015160015460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052929350169063a9059cbb906044016020604051808303816000875af1158015610412573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610436919061118d565b508086610100015161044891906111b6565b6001600160801b031661010087015250610532565b6000828660e0015161046f91906110e8565b90508561012001516001600160801b031681111561049857506101208501516001600160801b03165b855160005460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af11580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610510919061118d565b5080866101200181815161052491906111b6565b6001600160801b0316905250505b6101008501516001600160801b0316156105d257602085015160005461010087015160405163a9059cbb60e01b81526001600160a01b0392831660048201526001600160801b03909116602482015291169063a9059cbb906044016020604051808303816000875af11580156105ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d0919061118d565b505b6101208501516001600160801b03161561066f57845160015461012087015160405163a9059cbb60e01b81526001600160a01b0392831660048201526001600160801b03909116602482015291169063a9059cbb906044016020604051808303816000875af1158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d919061118d565b505b6040513081527f8b9af28cc3b96591597a5eae32ffeae6126a74169070e84fb09c99992d7340b09060200160405180910390a15050505050565b60025460ff166001036106c2576106bf816108df565b50565b6002805460ff1690036106d8576106bf81610c4e565b60405162461bcd60e51b815260206004820152600c60248201526b57726f6e672073746174652160a01b604482015260640160405180910390fd5b60025460ff161561072357600080fd5b6002805460ff19166001179055600080546001600160a01b0319163317905561074a610e9e565b6004805461075790610f0b565b80601f016020809104026020016040519081016040528092919081815260200182805461078390610f0b565b80156107d05780601f106107a5576101008083540402835291602001916107d0565b820191906000526020600020905b8154815290600101906020018083116107b357829003601f168201915b50505050508060200190518101906107e89190611011565b60208101516101008201516040516323b872dd60e01b81523360048201523060248201526001600160801b0390911660448201529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610851573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610875919061118d565b506040513081527feb05f1f2ed517218b630f5f6c1a7c039f730003d7f64b9621477ec8597846f8d9060200160405180910390a150565b60006108c183670de0b6b3a764000084610e7f565b90505b92915050565b60006108c18383670de0b6b3a7640000610e7f565b6002805460ff191681179055600180546001600160a01b031916331790556001600160801b0381111561091157600080fd5b610919610e9e565b6004805461092690610f0b565b80601f016020809104026020016040519081016040528092919081815260200182805461095290610f0b565b801561099f5780601f106109745761010080835404028352916020019161099f565b820191906000526020600020905b81548152906001019060200180831161098257829003601f168201915b50505050508060200190518101906109b79190611011565b9050600081604001516001600160a01b0316635a0da8fa8360600151846101000151856020015186600001516040518563ffffffff1660e01b8152600401610a02949392919061113c565b602060405180830381865afa158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a439190611174565b905060004290506000610a638385608001516001600160501b03166108ca565b90506001600160801b03811115610a7e57506001600160801b035b600081868660c001516008610a9391906111dd565b6001600160581b0316610aa6919061120c565b610ab0919061120c565b85516040516323b872dd60e01b81523360048201523060248201526001600160801b03831660448201529192506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610b0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b33919061118d565b5060405180610140016040528086600001516001600160a01b0316815260200186602001516001600160a01b0316815260200186604001516001600160a01b03168152602001866060015163ffffffff16815260200186608001516001600160501b031681526020018466ffffffffffffff1681526020018660c001516001600160581b031681526020018581526020018661010001516001600160801b03168152602001826001600160801b0316815250604051602001610bf5919061121f565b60405160208183030381529060405260049081610c12919061135d565b506040513081527f2c04475e6c00205263948e86a63403c41ee05c79a4cfad1b3ad528655473b7389060200160405180910390a1505050505050565b610c56610e9e565b60048054610c6390610f0b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8f90610f0b565b8015610cdc5780601f10610cb157610100808354040283529160200191610cdc565b820191906000526020600020905b815481529060010190602001808311610cbf57829003601f168201915b5050505050806020019051810190610cf49190611011565b90506001600160801b03821115610d0a57600080fd5b80516040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610d60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d84919061118d565b5060405180610140016040528082600001516001600160a01b0316815260200182602001516001600160a01b0316815260200182604001516001600160a01b03168152602001826060015163ffffffff16815260200182608001516001600160501b031681526020018260a0015166ffffffffffffff1681526020018260c001516001600160581b031681526020018260e0015181526020018261010001516001600160801b0316815260200183836101200151610e42919061141d565b6001600160801b03169052604051610e5d919060200161121f565b60405160208183030381529060405260049081610e7a919061135d565b505050565b828202811515841585830485141716610e9757600080fd5b0492915050565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b600060208284031215610f0457600080fd5b5035919050565b600181811c90821680610f1f57607f821691505b602082108103610f3f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715610f7f57610f7f610f45565b60405290565b80516001600160a01b0381168114610f9c57600080fd5b919050565b805163ffffffff81168114610f9c57600080fd5b80516001600160501b0381168114610f9c57600080fd5b805166ffffffffffffff81168114610f9c57600080fd5b80516001600160581b0381168114610f9c57600080fd5b80516001600160801b0381168114610f9c57600080fd5b6000610140828403121561102457600080fd5b61102c610f5b565b61103583610f85565b815261104360208401610f85565b602082015261105460408401610f85565b604082015261106560608401610fa1565b606082015261107660808401610fb5565b608082015261108760a08401610fcc565b60a082015261109860c08401610fe3565b60c082015260e083015160e08201526101006110b5818501610ffa565b908201526101206110c7848201610ffa565b908201529392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108c4576108c46110d2565b60008261111857634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611137576111376110d2565b500290565b63ffffffff9490941684526001600160801b039290921660208401526001600160a01b03908116604084015216606082015260800190565b60006020828403121561118657600080fd5b5051919050565b60006020828403121561119f57600080fd5b815180151581146111af57600080fd5b9392505050565b6001600160801b038281168282160390808211156111d6576111d66110d2565b5092915050565b60006001600160581b0380831681851681830481118215151615611203576112036110d2565b02949350505050565b808201808211156108c4576108c46110d2565b81516001600160a01b031681526101408101602083015161124b60208401826001600160a01b03169052565b50604083015161126660408401826001600160a01b03169052565b50606083015161127e606084018263ffffffff169052565b50608083015161129960808401826001600160501b03169052565b5060a08301516112b460a084018266ffffffffffffff169052565b5060c08301516112cf60c08401826001600160581b03169052565b5060e083015160e0830152610100808401516112f5828501826001600160801b03169052565b5050610120928301516001600160801b0316919092015290565b601f821115610e7a57600081815260208120601f850160051c810160208610156113365750805b601f850160051c820191505b8181101561135557828155600101611342565b505050505050565b815167ffffffffffffffff81111561137757611377610f45565b61138b816113858454610f0b565b8461130f565b602080601f8311600181146113c057600084156113a85750858301515b600019600386901b1c1916600185901b178555611355565b600085815260208120601f198616915b828110156113ef578886015182559484019460019091019084016113d0565b508582101561140d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160801b038181168382160190808211156111d6576111d66110d256fea2646970667358221220dc7701be24b7df84baf165d72d07821a4ce5fe59a49a1016452df64c9871021f64736f6c63430008100033";
const moduleABI = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "borrow",
        type: "address",
      },
    ],
    name: "closeEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "borrow",
        type: "address",
      },
    ],
    name: "fundWithMarginAndOpenEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "borrow",
        type: "address",
      },
    ],
    name: "fundWithTokensEvent",
    type: "event",
  },
  {
    inputs: [],
    name: "onClose",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_extraMargin",
        type: "uint256",
      },
    ],
    name: "onFundWithMarginAndOpen",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "onFundWithTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const OracleBytecode = "0x6080604052600080546001600160a01b031916731f98431c8ad98523631ae4a59f267346ea31f98417905534801561003657600080fd5b50610d4e806100466000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806349cb24b6146100515780635a0da8fa146100af5780637cfe71981461010a5780639874a99c14610154575b600080fd5b61007d6004803603604081101561006757600080fd5b506001600160a01b0381351690602001356101a7565b604080516001600160a01b03958616815293909416602084015282840191909152606082015290519081900360800190f35b6100f8600480360360808110156100c557600080fd5b5063ffffffff813516906001600160801b03602082013516906001600160a01b03604082013581169160600135166101d4565b60408051918252519081900360200190f35b6100f8600480360360a081101561012057600080fd5b506001600160a01b038135811691602081013582169160408201359163ffffffff60608201351691608090910135166102c9565b6100f8600480360360a081101561016a57600080fd5b506001600160a01b03813581169163ffffffff602082013516916001600160801b03604083013516916060810135821691608090910135166102ef565b6000806000806101b78686610306565b92999198506001600160801b039081169750909116945092505050565b6000805460408051630b4c774160e11b81526001600160a01b038681166004830152858116602483015262ffffff89166044830152915184939290921691631698ee8291606480820192602092909190829003018186803b15801561023857600080fd5b505afa15801561024c573d6000803e3d6000fd5b505050506040513d602081101561026257600080fd5b505160408051808201909152600e81526d02837b7b61030b2323932b9b99d160951b602082015290915061029690826103aa565b6102bf6102b773d40caa3f4fac8ac7b6f2f76e2437a27722df5e2688610465565b868686610478565b9695505050505050565b6000806102d6878561048f565b90506102e486868386610762565b979650505050505050565b60006102bf6102fe8787610465565b858585610478565b6000806000806000869050806001600160a01b03166399fbab88876040518263ffffffff1660e01b8152600401808281526020019150506101806040518083038186803b15801561035657600080fd5b505afa15801561036a573d6000803e3d6000fd5b505050506040513d61018081101561038157600080fd5b506040810151606082015161014083015161016090930151919a90995091975095509350505050565b61046182826040516024018080602001836001600160a01b03168152602001828103825284818151815260200191508051906020019080838360005b838110156103fe5781810151838201526020016103e6565b50505050905090810190601f16801561042b5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052935061081792505050565b5050565b6000610471838361048f565b9392505050565b600061048685858585610838565b95945050505050565b600063ffffffff82166104a157600080fd5b60408051600280825260608201835260009260208301908036833701905050905082816000815181106104d057fe5b602002602001019063ffffffff16908163ffffffff16815250506000816001815181106104f957fe5b63ffffffff90921660209283029190910182015260405163883bdbfd60e01b8152600481018281528351602483015283516000936001600160a01b0389169363883bdbfd938793909283926044019185820191028083838b5b8381101561056a578181015183820152602001610552565b505050509050019250505060006040518083038186803b15801561058d57600080fd5b505afa1580156105a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160409081528110156105ca57600080fd5b81019080805160405193929190846401000000008211156105ea57600080fd5b9083019060208201858111156105ff57600080fd5b825186602082028301116401000000008211171561061c57600080fd5b82525081516020918201928201910280838360005b83811015610649578181015183820152602001610631565b505050509050016040526020018051604051939291908464010000000082111561067257600080fd5b90830190602082018581111561068757600080fd5b82518660208202830111640100000000821117156106a457600080fd5b82525081516020918201928201910280838360005b838110156106d15781810151838201526020016106b9565b505050509050016040525050505090506000816000815181106106f057fe5b60200260200101518260018151811061070557fe5b60200260200101510390508463ffffffff168160060b8161072257fe5b05935060008160060b12801561074c57508463ffffffff168160060b8161074557fe5b0760060b15155b1561075957600019909301925b50505092915050565b60008060008060006107748989610306565b9350935093509350856001600160a01b0316846001600160a01b031614156107b4576107a287828587610838565b6001600160801b03831601945061080b565b856001600160a01b0316836001600160a01b031614156107ec576107da87838686610838565b6001600160801b03821601945061080b565b6107f887828589610838565b945061080687838689610838565b850194505b50505050949350505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60008061084486610937565b90506001600160801b036001600160a01b038216116108b7576001600160a01b0380821680029084811690861610156108965761088f81876001600160801b0316600160c01b610c69565b92506108b1565b6108ae600160c01b876001600160801b031683610c69565b92505b5061092e565b60006108d66001600160a01b0383168068010000000000000000610c69565b9050836001600160a01b0316856001600160a01b031610156109115761090a81876001600160801b0316600160c01b610c69565b925061092c565b610929600160c01b876001600160801b031683610c69565b92505b505b50949350505050565b60008060008360020b1261094e578260020b610956565b8260020b6000035b9050620d89e8811115610994576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b6000600182166109a857600160801b6109ba565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156109ee576ffff97272373d413259a46990580e213a0260801c5b6004821615610a0d576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610a2c576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610a4b576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610a6a576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610a89576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610aa8576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610ac8576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610ae8576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610b08576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610b28576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610b48576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610b68576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610b88576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610ba8576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610bc9576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610be9576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610c08576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610c25576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610c40578060001981610c3c57fe5b0490505b640100000000810615610c54576001610c57565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080610c9f5760008411610c9457600080fd5b508290049050610471565b808411610cab57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a0290910302918190038190046001018684119095039490940291909403929092049190911791909102915050939250505056fea2646970667358221220894c765e4469d7c4c6311283e96323fb224c67a715ba5db7eb99421d49f5ab7764736f6c63430007060033";
const OracleABI = [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_period",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "_amount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "getSpotPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_period",
          "type": "uint32"
        },
        {
          "internalType": "uint128",
          "name": "_amount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        }
      ],
      "name": "getSpotPriceNoPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nfpm",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_twap",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_quoteAddress",
          "type": "address"
        }
      ],
      "name": "getUniswapNftQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_quoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nfpm",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getUniswapNftTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ]

const tokenABI =
  require("../artifacts/contracts/PooolToken/PooolToken.sol/ERC20.json").abi;

describe("Pool Tests", function () {
  let riskAddress, factoryAddress, pooolAddress, poool;
  let Adapter;
  let UniModuleAddress, TrsModuleAddress;
  let token;

  it("Should deploy the RiskController contract", async function () {
    const Risk = await ethers.getContractFactory("RiskController");
    const risk = await Risk.deploy();
    await risk.deployed();

    riskAddress = await risk.address;

    expect(riskAddress).to.not.equal(
      "0x0000000000000000000000000000000000000000"
    );
  });

  it("Should deploy the Factory contract", async function () {
    const [signer] = await ethers.getSigners();

    const Factory = new ethers.ContractFactory(
      factoryABI,
      factoryBytecode,
      signer
    );

    factory = await Factory.deploy();

    await factory.deployed();
    factoryAddress = await factory.address;

    expect(factoryAddress).to.not.equal(
      "0x0000000000000000000000000000000000000000"
    );
  });

  it("Should deploy the poool contract", async function () {
    const Poool = await ethers.getContractFactory("RainshowerPoool");
    poool = await Poool.deploy(riskAddress, factoryAddress); // Remove const
    await poool.deployed();

    pooolAddress = await poool.address;

    expect(pooolAddress).to.not.equal(
      "0x0000000000000000000000000000000000000000"
    );
  });

  it("Should add assets to the poool", async function () {
    await expect(poool.addAsset(fWETH)).to.not.be.reverted;
    await expect(poool.addAsset(fUSDC)).to.not.be.reverted;
  });

  it("Should deploy the module contracts", async function () {
    const [signer] = await ethers.getSigners();

    const UniModule = new ethers.ContractFactory(
      moduleABI,
      UniModuleBytecode,
      signer
    );
    const uniModule = await UniModule.deploy();

    await uniModule.deployed();
    UniModuleAddress = await uniModule.address;

    expect(UniModuleAddress).to.not.equal(
      "0x0000000000000000000000000000000000000000"
    );

    const TrsModule = new ethers.ContractFactory(
      moduleABI,
      TrsModuleBytecode,
      signer
    );
    const trsModule = await TrsModule.deploy();

    await trsModule.deployed();
    TrsModuleAddress = await trsModule.address;

    expect(TrsModuleAddress).to.not.equal(
      "0x0000000000000000000000000000000000000000"
    );
  });

  it("Should deploy the adapters", async function () {
    Adapter = await ethers.getContractFactory("UniswapDataAdapter");
    const adapter = await Adapter.deploy(); // Add const keyword
    await adapter.deployed();

    const UniAdapterAddress = await adapter.address;

    expect(UniAdapterAddress).to.not.equal(
      "0x0000000000000000000000000000000000000000"
    );

    Adapter = await ethers.getContractFactory("TotalReturnSwapDataAdapter");
    const adapter2 = await Adapter.deploy(); // Change variable name to avoid confusion
    await adapter2.deployed();

    const TrsAdapterAddress = await adapter2.address;

    expect(TrsAdapterAddress).to.not.equal(
      "0x0000000000000000000000000000000000000000"
    );

    // Add adapters to poool
    await poool.addAdapter(UniAdapterAddress, UniModuleAddress);
    // Add adapters to poool
    await poool.addAdapter(TrsAdapterAddress, TrsModuleAddress);
  });

  it("Should deposit into the poool", async function () {
    // Get fWETH contract with erc20 abi
    token = await ethers.getContractAt(tokenABI, fWETH);
    // Approve the poool to spend the tokens
    await token.approve(pooolAddress, "10000");
    // Deposit fWETH into poool
    await poool.deposit(fWETH, "10000");

    // Check that the poool has the tokens
    expect(await token.balanceOf(pooolAddress)).to.equal("10000");
  });

  it("Should withdraw from the poool", async function () {
    token = await ethers.getContractAt(tokenABI, fWETH);
    // Revert if we try to withdraw too much
    await expect(poool.withdraw(fWETH, "10001")).to.be.reverted;
    // Withdraw fWETH from poool
    await poool.withdraw(fWETH, "10000");
    // Check that the poool has no tokens
    expect(await token.balanceOf(pooolAddress)).to.equal("0");
  });

  it("Should get a quote", async function () {
    // Get current latest borrow
    const previousBorrow = await factory.latestBorrow()

    // Approve the poool to spend the tokens
    await token.approve(pooolAddress, "10000000000000");
    // Deposit fWETH into poool
    await poool.deposit(fWETH, "10000000000000");

    const [signer] = await ethers.getSigners();

    const Oracle = new ethers.ContractFactory(
      OracleABI,
      OracleBytecode,
      signer
    );
    const oracle = await Oracle.deploy();

    rawBorrowData =
    [
      {
        quoteToken: fWETH,
        quoteAmount: '10000000',
        baseToken: fUSDC,
        oracleAddress: oracle.address,
        poolFee: fee,
        period: period,
        maintanenceMargin: "20000000000000000",
        swapRouterAddress: swapRouterAddress,
        pool: pool
      }
    ]

    abi = ethers.utils.defaultAbiCoder
    data = abi.encode([
                        `tuple(address quoteToken, uint128 quoteAmount, address baseToken, address oracleAddress,
                         uint24 poolFee, uint32 period, uint80 maintanenceMargin,
                         address swapRouterAddress, address pool)` ], rawBorrowData)

    await poool.getQuote(UniModuleAddress, data)

    latestBorrow = await factory.latestBorrow()

    expect(latestBorrow.quoteToken).to.not.equal(previousBorrow)
  });

  // it("Should get interest rates", async function () {
  //   await poool.getInterestRates(fWETH);

  //   latestBorrow = await factory.latestBorrow();

  //   expect(latestBorrow.interestRate).to.not.equal('0');
  // });

});
